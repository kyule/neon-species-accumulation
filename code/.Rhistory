### This is the primary file for analyzing NEON species accumulation data
#### BEFORE RUNNING
# Users must define their own paths
# datapath<-"user defined path"
# codepath<-"user defined path"
# Users need to indicate whether they want to load or re-download and format the NEON data
# These these steps are very time consuming so it is recommended that they are only done if necessary
NewCleanData<-FALSE
# And users should remove below line that loads in personal paths
source("/Users/kelsey/Github/neon-species-accumulation/configini.R")
# Load some necessary packages
library("dplyr")
library("vegan")
# Load in the formatted clean data, or download and create it.
#Make sure DataCleaning.R is correctly configured
if(NewCleanData==TRUE|file.exists(paste0(datapath,"CleanedData.Robj"))==FALSE){
source(paste0(codepath,"DataCleaning.R"))}else{load(file=paste0(datapath,"CleanedData.Robj"))}
# Define data of interest
fullData<-CleanedData$fullData
effort<-CleanedData$effort
# Creat function to reformat data for community matrix input into vegan package ### SOMETHING IS WRONG
createComm<-function(data,site,nlcd){
community<-data[which(data$siteID==site & data$nlcdClass==nlcd),]
community<-community[!is.na(community$taxonID),]
community$comm<-paste(community$siteID,community$nlcdClass,community$year,sep=".")
community<-community[,colnames(community) %in% c("comm","sciName","individualCountFinal")]
communityMatrix<-reshape(community,direction="wide",timevar = "sciName",idvar="comm")
colnames(communityMatrix)<-str_replace(colnames(communityMatrix),"individualCountFinal.","")
communityMatrix[is.na(communityMatrix)]<-0
return(communityMatrix)
}
createComm(fullData,"SRER","shrubScrub")
library("stringr")
createComm(fullData,"SRER","shrubScrub")
createComm(fullData,"SRER","shrubScrub")
a<-createComm(fullData,"SRER","shrubScrub")
specaccum(a)
a[,!1]
a[,-1]
specaccum(a[,-1])
install.packages("neonOS")
library(ecocomDP)
install.packages("ecocomDP")
library(ecocomDP)
install.packages("neonDivData", repos = 'https://daijiang.r-universe.dev')
library(neonDivData)
?neonDivData
??neonDivData
neonDivData::data_beetle
bet<-neonDivData::data_beetle
View(bet)
library(ecocomDP)
specaccum(a[,-1])
plot(a)
b<-specaccum(a[,-1])
View(a)
b
plot(b)
srer<-data[which(data$siteID=="SRER"),]
srer<-data[which(data$siteID=="SRER"),]
# Users need to indicate whether they want to load or re-download and format the NEON data
# These these steps are very time consuming so it is recommended that they are only done if necessary
NewCleanData<-FALSE
# And users should remove below line that loads in personal paths
source("/Users/kelsey/Github/neon-species-accumulation/configini.R")
# Load some necessary packages
library("dplyr")
library("vegan")
library("stringr")
if(NewCleanData==TRUE|file.exists(paste0(datapath,"CleanedData.Robj"))==FALSE){
source(paste0(codepath,"DataCleaning.R"))}else{load(file=paste0(datapath,"CleanedData.Robj"))}
# Define data of interest
fullData<-CleanedData$fullData
effort<-CleanedData$effort
srer<-fullData[which(fullData$siteID=="SRER"),]
srer
View(fullData)
View(srer)
fullData->data
site->"SRER"
site<-"SRER"
nlcd<-"shrubScrub"
community<-data[which(data$siteID==site & data$nlcdClass==nlcd),]
View(community)
community<-community[community$individualCountFinal!=0,]
community$comm<-paste(community$siteID,community$nlcdClass,community$year,sep=".")
View(community)
community<-community[,colnames(community) %in% c("comm","sciName","individualCountFinal")]
View(community)
communityMatrix<-reshape(community,direction="wide",timevar = "sciName",idvar="comm")
View(communityMatrix)
colnames(communityMatrix)<-str_replace(colnames(communityMatrix),"individualCountFinal.","")
communityMatrix[is.na(communityMatrix)]<-0
View(communityMatrix)
community<-data[which(data$siteID==site & data$nlcdClass==nlcd),]
community<-community[community$individualCountFinal!=0,]
community$comm<-paste(community$siteID,community$nlcdClass,community$year,sep=".")
community<-community[,colnames(community) %in% c("comm","sciName","individualCountFinal")]
View(community)
community.summary<-data.frame(community %>% group_by(comm,sciName) %>% summarise(individualCountFinal=sum(individualCountFinal)))
View(community.summary)
communityMatrix<-reshape(community.summary,direction="wide",timevar = "sciName",idvar="comm")
View(communityMatrix)
srer[which(srer$sciName=="Lebia subgrandis"),]
View(community.summary)
colnames(communityMatrix)<-str_replace(colnames(communityMatrix),"individualCountFinal.","")
communityMatrix[is.na(communityMatrix)]<-0
View(communityMatrix)
# Creat function to reformat data for community matrix input into vegan package ### SOMETHING IS WRONG
createComm<-function(data,site,nlcd){
community<-data[which(data$siteID==site & data$nlcdClass==nlcd),]
community<-community[community$individualCountFinal!=0,]
community$comm<-paste(community$siteID,community$nlcdClass,community$year,sep=".")
community<-community[,colnames(community) %in% c("comm","sciName","individualCountFinal")]
community.summary<-data.frame(community %>% group_by(comm,sciName) %>% summarise(individualCountFinal=sum(individualCountFinal)))
communityMatrix<-reshape(community.summary,direction="wide",timevar = "sciName",idvar="comm")
colnames(communityMatrix)<-str_replace(colnames(communityMatrix),"individualCountFinal.","")
communityMatrix[is.na(communityMatrix)]<-0
return(communityMatrix)
}
a<-createComm(fullData,"SRER","shrubScrub")
b<-specaccum(a[,-1])
# Creat function to reformat data for community matrix input into vegan package ### SOMETHING IS WRONG
createComm<-function(data,site,nlcd){
community<-data[which(data$siteID==site & data$nlcdClass==nlcd),]
community<-community[community$individualCountFinal!=0,]
community$comm<-paste(community$siteID,community$nlcdClass,community$year,sep=".")
community<-community[,colnames(community) %in% c("comm","sciName","individualCountFinal")]
community.summary<-data.frame(community %>% group_by(comm,sciName) %>% summarise(individualCountFinal=sum(individualCountFinal)))
communityMatrix<-reshape(community.summary,direction="wide",timevar = "sciName",idvar="comm")
colnames(communityMatrix)<-str_replace(colnames(communityMatrix),"individualCountFinal.","")
communityMatrix[is.na(communityMatrix)]<-0
return(communityMatrix)
}
a<-createComm(fullData,"SRER","shrubScrub")
b<-specaccum(a[,-1])
View(a)
b
plot(b)
a<-createComm(fullData,"HARV","deciduousForest")
b<-specaccum(a[,-1])
plot(b)
data$nlcdClass[which(data$siteID=="GUAN")]
a<-createComm(fullData,"GUAN","evergreenForest")
plot(b)
b<-specaccum(a[,-1])
b<-specaccum(a[,-1])
plot(b)
?rarecurve
View(effort)
community.summary
View(effort)
eff<-effort[which(effort$siteID==site & effort$nlcdClass==nlcd),]
eff
eff$comm<-paste(effort$siteID,effort$nlcdClass,effort$year,sep=".")
eff$comm<-paste(eff$siteID,eff$nlcdClass,eff$year,sep=".")
eff
eff.nos<-left_join(communityMatrix,eff,join_by("comm"=="comm"))
eff.nos
eff.nos<-left_join(communityMatrix,eff[,c("comm","days")],join_by("comm"=="comm"))
eff.nos
data(varespec)
sptrans <- decostand(varespec, "max")
apply(sptrans, 2, max)
sptrans <- wisconsin(varespec)
View(sptrans)
eff<-effort[which(effort$siteID==site & effort$nlcdClass==nlcd),]
eff$comm<-paste(eff$siteID,eff$nlcdClass,eff$year,sep=".")
eff.nos<-left_join(communityMatrix,eff[,c("comm","days")],join_by("comm"=="comm"))$days
eff.nos
communityMatrix[,2:]
eff.nos<-left_join(communityMatrix,eff[,c("comm","days")],join_by("comm"=="comm"))$nights
communityMatrix[,2:]/nights
communityMatrix[,-1]/nights
communityMatrix[,-1]/eff.nos$nights
nrow(communityMatrix)
nrow(eff.nos)
eff.nos<-left_join(communityMatrix,eff[,c("comm","days")],join_by("comm"=="comm"))$nights
communityMatrix[,-1]/eff.nos$nights
communityMatrix[,-"comm"]<
communityMatrix[,-"comm"]
communityMatrix<-left_join(communityMatrix,eff[,c("comm","days")],join_by("comm"=="comm"))
communityMatrix[,-c(1,ncol(communityMatrix)]
communityMatrix[,-c(1,ncol(communityMatrix))]
communityMatrix[,-c(1,ncol(communityMatrix))]/communityMatrix$days
View(effort)
# Create function to reformat data for community matrix input into vegan package ### SOMETHING IS WRONG
createComm<-function(data,site,nlcd,standardized){
community<-data[which(data$siteID==site & data$nlcdClass==nlcd),]
community<-community[community$individualCountFinal!=0,]
community$comm<-paste(community$siteID,community$nlcdClass,community$year,sep=".")
community<-community[,colnames(community) %in% c("comm","sciName","individualCountFinal")]
community.summary<-data.frame(community %>% group_by(comm,sciName) %>% summarise(individualCountFinal=sum(individualCountFinal)))
communityMatrix<-reshape(community.summary,direction="wide",timevar = "sciName",idvar="comm")
colnames(communityMatrix)<-str_replace(colnames(communityMatrix),"individualCountFinal.","")
communityMatrix[is.na(communityMatrix)]<-0
if(standardized="year"){return(communityMatrix[,-1])}
# Create function to reformat data for community matrix input into vegan package ### SOMETHING IS WRONG
createComm<-function(data,site,nlcd,standardized){
community<-data[which(data$siteID==site & data$nlcdClass==nlcd),]
community<-community[community$individualCountFinal!=0,]
community$comm<-paste(community$siteID,community$nlcdClass,community$year,sep=".")
community<-community[,colnames(community) %in% c("comm","sciName","individualCountFinal")]
community.summary<-data.frame(community %>% group_by(comm,sciName) %>% summarise(individualCountFinal=sum(individualCountFinal)))
communityMatrix<-reshape(community.summary,direction="wide",timevar = "sciName",idvar="comm")
colnames(communityMatrix)<-str_replace(colnames(communityMatrix),"individualCountFinal.","")
communityMatrix[is.na(communityMatrix)]<-0
if(standardized=="year"){return(communityMatrix[,-1])}
if(standardized=="days"){
eff<-effort[which(effort$siteID==site & effort$nlcdClass==nlcd),]
eff$comm<-paste(eff$siteID,eff$nlcdClass,eff$year,sep=".")
communityMatrix<-left_join(communityMatrix,eff[,c("comm","days")],join_by("comm"=="comm"))
communityMatrix[,-c(1,ncol(communityMatrix))]<-communityMatrix[,-c(1,ncol(communityMatrix))]/communityMatrix$days
return(communityMatrix[,-c(1,ncol(communityMatrix))])
}
if(standardized=="individuals"){
eff<-effort[which(effort$siteID==site & effort$nlcdClass==nlcd),]
eff$comm<-paste(eff$siteID,eff$nlcdClass,eff$year,sep=".")
communityMatrix<-left_join(communityMatrix,eff[,c("comm","indivs")],join_by("comm"=="comm"))
communityMatrix[,-c(1,ncol(communityMatrix))]<-communityMatrix[,-c(1,ncol(communityMatrix))]/communityMatrix$indivs
return(communityMatrix[,-c(1,ncol(communityMatrix))])
}
}
# Create function to reformat data for community matrix input into vegan package ### SOMETHING IS WRONG
createComm<-function(data,site,nlcd,standardized){
community<-data[which(data$siteID==site & data$nlcdClass==nlcd),]
community<-community[community$individualCountFinal!=0,]
community$comm<-paste(community$siteID,community$nlcdClass,community$year,sep=".")
community<-community[,colnames(community) %in% c("comm","sciName","individualCountFinal")]
community.summary<-data.frame(community %>% group_by(comm,sciName) %>% summarise(individualCountFinal=sum(individualCountFinal)))
communityMatrix<-reshape(community.summary,direction="wide",timevar = "sciName",idvar="comm")
colnames(communityMatrix)<-str_replace(colnames(communityMatrix),"individualCountFinal.","")
communityMatrix[is.na(communityMatrix)]<-0
if(standardized=="year"){return(communityMatrix[,-1])}
if(standardized=="days"){
eff<-effort[which(effort$siteID==site & effort$nlcdClass==nlcd),]
eff$comm<-paste(eff$siteID,eff$nlcdClass,eff$year,sep=".")
communityMatrix<-left_join(communityMatrix,eff[,c("comm","days")],join_by("comm"=="comm"))
communityMatrix[,-c(1,ncol(communityMatrix))]<-communityMatrix[,-c(1,ncol(communityMatrix))]/communityMatrix$days
return(communityMatrix[,-c(1,ncol(communityMatrix))])
}
if(standardized=="individuals"){
eff<-effort[which(effort$siteID==site & effort$nlcdClass==nlcd),]
eff$comm<-paste(eff$siteID,eff$nlcdClass,eff$year,sep=".")
communityMatrix<-left_join(communityMatrix,eff[,c("comm","indivs")],join_by("comm"=="comm"))
communityMatrix[,-c(1,ncol(communityMatrix))]<-communityMatrix[,-c(1,ncol(communityMatrix))]/communityMatrix$indivs
return(communityMatrix[,-c(1,ncol(communityMatrix))])
}
}
# Create function to reformat data for community matrix input into vegan package ### SOMETHING IS WRONG
createComm<-function(data,effort,site,nlcd,standardized){
community<-data[which(data$siteID==site & data$nlcdClass==nlcd),]
community<-community[community$individualCountFinal!=0,]
community$comm<-paste(community$siteID,community$nlcdClass,community$year,sep=".")
community<-community[,colnames(community) %in% c("comm","sciName","individualCountFinal")]
community.summary<-data.frame(community %>% group_by(comm,sciName) %>% summarise(individualCountFinal=sum(individualCountFinal)))
communityMatrix<-reshape(community.summary,direction="wide",timevar = "sciName",idvar="comm")
colnames(communityMatrix)<-str_replace(colnames(communityMatrix),"individualCountFinal.","")
communityMatrix[is.na(communityMatrix)]<-0
if(standardized=="year"){return(communityMatrix[,-1])}
if(standardized=="days"){
eff<-effort[which(effort$siteID==site & effort$nlcdClass==nlcd),]
eff$comm<-paste(eff$siteID,eff$nlcdClass,eff$year,sep=".")
communityMatrix<-left_join(communityMatrix,eff[,c("comm","days")],join_by("comm"=="comm"))
communityMatrix[,-c(1,ncol(communityMatrix))]<-communityMatrix[,-c(1,ncol(communityMatrix))]/communityMatrix$days
return(communityMatrix[,-c(1,ncol(communityMatrix))])
}
if(standardized=="individuals"){
eff<-effort[which(effort$siteID==site & effort$nlcdClass==nlcd),]
eff$comm<-paste(eff$siteID,eff$nlcdClass,eff$year,sep=".")
communityMatrix<-left_join(communityMatrix,eff[,c("comm","indivs")],join_by("comm"=="comm"))
communityMatrix[,-c(1,ncol(communityMatrix))]<-communityMatrix[,-c(1,ncol(communityMatrix))]/communityMatrix$indivs
return(communityMatrix[,-c(1,ncol(communityMatrix))])
}
}
a<-createComm(fullData,effort,"SRER","shrubScrub","nights")
community<-data[which(data$siteID==site & data$nlcdClass==nlcd),]
community<-community[community$individualCountFinal!=0,]
community$comm<-paste(community$siteID,community$nlcdClass,community$year,sep=".")
community<-community[,colnames(community) %in% c("comm","sciName","individualCountFinal")]
a
community.summary<-data.frame(community %>% group_by(comm,sciName) %>% summarise(individualCountFinal=sum(individualCountFinal)))
communityMatrix<-reshape(community.summary,direction="wide",timevar = "sciName",idvar="comm")
colnames(communityMatrix)<-str_replace(colnames(communityMatrix),"individualCountFinal.","")
communityMatrix[is.na(communityMatrix)]<-0
a<-createComm(fullData,effort,"SRER","shrubScrub","days")
View(a)
b<-specaccum(a)
plot(b)
b
# Create function to reformat data for community matrix input into vegan package ### SOMETHING IS WRONG
createComm<-function(data,effort,site,nlcd,standardized){
community<-data[which(data$siteID==site & data$nlcdClass==nlcd),]
community<-community[community$individualCountFinal!=0,]
community$comm<-paste(community$siteID,community$nlcdClass,community$year,sep=".")
community<-community[,colnames(community) %in% c("comm","sciName","individualCountFinal")]
community.summary<-data.frame(community %>% group_by(comm,sciName) %>% summarise(individualCountFinal=sum(individualCountFinal)))
communityMatrix<-reshape(community.summary,direction="wide",timevar = "sciName",idvar="comm")
colnames(communityMatrix)<-str_replace(colnames(communityMatrix),"individualCountFinal.","")
communityMatrix[is.na(communityMatrix)]<-0
if(standardized=="years"){return(communityMatrix[,-1])}
if(standardized=="days"){
eff<-effort[which(effort$siteID==site & effort$nlcdClass==nlcd),]
eff$comm<-paste(eff$siteID,eff$nlcdClass,eff$year,sep=".")
communityMatrix<-left_join(communityMatrix,eff[,c("comm","days")],join_by("comm"=="comm"))
communityMatrix[,-c(1,ncol(communityMatrix))]<-communityMatrix[,-c(1,ncol(communityMatrix))]/communityMatrix$days
return(communityMatrix[,-c(1,ncol(communityMatrix))])
}
if(standardized=="individuals"){
eff<-effort[which(effort$siteID==site & effort$nlcdClass==nlcd),]
eff$comm<-paste(eff$siteID,eff$nlcdClass,eff$year,sep=".")
communityMatrix<-left_join(communityMatrix,eff[,c("comm","indivs")],join_by("comm"=="comm"))
communityMatrix[,-c(1,ncol(communityMatrix))]<-communityMatrix[,-c(1,ncol(communityMatrix))]/communityMatrix$indivs
return(communityMatrix[,-c(1,ncol(communityMatrix))])
}
}
a<-createComm(fullData,effort,"SRER","shrubScrub","days")
b<-specaccum(a)
plot(b)
c<-createComm(fullData,effort,"SRER","shrubScrub","years")
d<-specaccum(a)
plot(d)
c<-createComm(fullData,effort,"SRER","shrubScrub","individuals")
d<-specaccum(a)
plot(d)
rarefy(a,100)
rarefy(c,100)
View(c)
c<-createComm(fullData,effort,"SRER","shrubScrub","years")
View(c)
c<-createComm(fullData,effort,"SRER","shrubScrub","years")
d<-specaccum(d)
plot(d)
c<-createComm(fullData,effort,"SRER","shrubScrub","years")
View(c)
d<-specaccum(c)
plot(d)
e<-createComm(fullData,effort,"SRER","shrubScrub","individuals")
f<-specaccum(e)
plot(f)
rarefy(c,100)
rarecurve(c,1,100)
data(BCI)
S <- specnumber(BCI) # observed number of species
(raremax <- min(rowSums(BCI)))
Srare <- rarefy(BCI, raremax)
plot(S, Srare, xlab = "Observed No. of Species", ylab = "Rarefied No. of Species")
abline(0, 1)
rarecurve(BCI, step = 20, sample = raremax, col = "blue", cex = 0.6)
raremax<-min(rowSumms(c))
rarefy(c,raremax)
raremax<-min(rowSums(c))
rarefy(c,raremax)
plot(c, rarefy(c,raremax), xlab = "Observed No. of Species", ylab = "Rarefied No. of Species")
specnumber(c)
specnumber(c)->a
plot(a, rarefy(c,raremax), xlab = "Observed No. of Species", ylab = "Rarefied No. of Species")
rarefy(c,raremax)
plot(a, rarefy(c,raremax), xlab = "Observed No. of Species", ylab = "Rarefied No. of Species")
specpool(c)
plot(d)
estimateR(c)
poolaccum(c, permutations = 100, minsize = 3)
metaMDS(varespec)
metaMDS(c)->ord
plot(ord)
plot(ord,type='t')
#### Just for fun, all communities in an ordination
fulldata %>% group_by(siteID,scientificName) %>% sum(individualCountFinal)
#### Just for fun, all communities in an ordination
fullData %>% group_by(siteID,scientificName) %>% sum(individualCountFinal)
#### Just for fun, all communities in an ordination
fullData %>% group_by(siteID,sciName) %>% sum(individualCountFinal)
#### Just for fun, all communities in an ordination
fullData %>% group_by(siteID,sciName) %>% summarise(n=sum(individualCountFinal))
#### Just for fun, all communities in an ordination
fullComms<-fullData %>% group_by(siteID,sciName) %>% summarise(n=sum(individualCountFinal))
### Something is wrong because individual counts of 0 shouldn't be showing up
communityMatrix<-reshape(fullComms,direction="wide",timevar = "sciName",idvar="siteID")
View(communityMatrix)
#### Just for fun, all communities in an ordination
fullComms<-data.frame(fullData %>% group_by(siteID,sciName) %>% summarise(n=sum(individualCountFinal)))
### Something is wrong because individual counts of 0 shouldn't be showing up
communityMatrix<-reshape(fullComms,direction="wide",timevar = "sciName",idvar="siteID")
View(communityMatrix)
communityMatrix[is.na(communityMatrix)]<-0
metaMDS(communityMatrix)->ord
plot(ord)
View(communityMatrix)
metaMDS(communityMatrix[,-1])->ord
plot(ord)
plot(ord,type="t")
plot(ord)
?plot
names(ord)
names(points)
ord$points
plot(ord$points)
names(ord)
ord$points$mds1
ord$points[[1]]
ord$points[1]
ord$points
names(ord)
ord$species
names(ord)
View(ord)
plot(ord, display = c("sites", "species"))
plot(ord, display = c("sites"),type='t')
row.names(communityMatrix)
sapply(strsplit(communityMatrix$comm,"."),'[',3)
community<-data[which(data$siteID==site & data$nlcdClass==nlcd),]
community<-community[community$individualCountFinal!=0,]
community$comm<-paste(community$siteID,community$nlcdClass,community$year,sep=".")
community<-community[,colnames(community) %in% c("comm","sciName","individualCountFinal")]
community.summary<-data.frame(community %>% group_by(comm,sciName) %>% summarise(individualCountFinal=sum(individualCountFinal)))
communityMatrix<-reshape(community.summary,direction="wide",timevar = "sciName",idvar="comm")
colnames(communityMatrix)<-str_replace(colnames(communityMatrix),"individualCountFinal.","")
communityMatrix[is.na(communityMatrix)]<-0
sapply(strsplit(communityMatrix$comm,"."),'[',3)
sapply(strsplit(communityMatrix$comm,"."),'[',2)
communityMatrix$comm
sapply(strsplit(communityMatrix$comm,"[.]"),'[',3)
# Create function to reformat data for community matrix input into vegan package ### SOMETHING IS WRONG
createComm<-function(data,effort,site,nlcd,standardized){
community<-data[which(data$siteID==site & data$nlcdClass==nlcd),]
community<-community[community$individualCountFinal!=0,]
community$comm<-paste(community$siteID,community$nlcdClass,community$year,sep=".")
community<-community[,colnames(community) %in% c("comm","sciName","individualCountFinal")]
community.summary<-data.frame(community %>% group_by(comm,sciName) %>% summarise(individualCountFinal=sum(individualCountFinal)))
communityMatrix<-reshape(community.summary,direction="wide",timevar = "sciName",idvar="comm")
colnames(communityMatrix)<-str_replace(colnames(communityMatrix),"individualCountFinal.","")
communityMatrix[is.na(communityMatrix)]<-0
if(standardized=="years"){
row.names(communityMatrix)<-sapply(strsplit(communityMatrix$comm,"[.]"),'[',3)
return(communityMatrix[,-1])}
if(standardized=="days"){
eff<-effort[which(effort$siteID==site & effort$nlcdClass==nlcd),]
eff$comm<-paste(eff$siteID,eff$nlcdClass,eff$year,sep=".")
communityMatrix<-left_join(communityMatrix,eff[,c("comm","days")],join_by("comm"=="comm"))
communityMatrix[,-c(1,ncol(communityMatrix))]<-communityMatrix[,-c(1,ncol(communityMatrix))]/communityMatrix$days
row.names(communityMatrix)<-sapply(strsplit(communityMatrix$comm,"[.]"),'[',3)
return(communityMatrix[,-c(1,ncol(communityMatrix))])
}
if(standardized=="individuals"){
eff<-effort[which(effort$siteID==site & effort$nlcdClass==nlcd),]
eff$comm<-paste(eff$siteID,eff$nlcdClass,eff$year,sep=".")
communityMatrix<-left_join(communityMatrix,eff[,c("comm","indivs")],join_by("comm"=="comm"))
communityMatrix[,-c(1,ncol(communityMatrix))]<-communityMatrix[,-c(1,ncol(communityMatrix))]/communityMatrix$indivs
row.names(communityMatrix)<-sapply(strsplit(communityMatrix$comm,"[.]"),'[',3)
return(communityMatrix[,-c(1,ncol(communityMatrix))])
}
}
a<-createComm(fullData,effort,"SRER","shrubScrub","days")
b<-specaccum(a)
plot(b,display=c("sites"),type='t')
a<-createComm(fullData,effort,"SRER","shrubScrub","days")
b<-specaccum(a)
plot(b,display=c("sites"),type='t')
plot(b,display=c("sites"))
#### Just for fun, all communities in an ordination
fullComms<-data.frame(fullData %>% group_by(siteID,sciName) %>% summarise(n=sum(individualCountFinal)))
### Something is wrong because individual counts of 0 shouldn't be showing up
communityMatrix<-reshape(fullComms,direction="wide",timevar = "sciName",idvar="siteID")
communityMatrix[is.na(communityMatrix)]<-0
row.names(communityMatrix)<-sapply(strsplit(communityMatrix$comm,"[.]"),'[',3)
metaMDS(communityMatrix[,-1])->ord
plot(ord)
row.names(communityMatrix)
row.names(communityMatrix)<-communityMatrix[,1]
metaMDS(communityMatrix[,-1])->ord
plot(ord)
plot(ord,display='sites',type='t')
### This is the  file for downloading NEON data
#### BEFORE RUNNING
#### Users must define their own paths and NEON toke
# datapath<-"user defined path"
# codepath<-"user defined path"
# Neon_Token<-"user's token"
#### And users should define their variables for the NEON data download
# data product of interest, below is for Carabids
product<-"DP1.10022.001"
# start and end dates, must be formatted as "YYYY-MM" or NA for all time
start<-"2000-01"
end<-"2024-05"
# sites, concatenated list of siteCodes or use "all" for all sites
sites<-"all"
# And user should remove below
source("/Users/kelsey/Github/neon-species-accumulation/configini.R")
# User can change other options in the loadByProduct function as desired
# load package
library(neonUtilities)
# Use loadByProduct to download the data
NeonData<-loadByProduct(dpID=product,
site=sites,
startdate=start,
enddate=end,
token=Neon_Token,
check.size=FALSE,
include.provisional=FALSE)
save(NeonData, file=paste0(datapath,"NeonData.Robj"))
